"""
VSS Data Models V3.0 - Comprehensive Social Security Data Structure
ƒê·ªãnh nghƒ©a to√†n di·ªán c·∫•u tr√∫c d·ªØ li·ªáu B·∫£o hi·ªÉm X√£ h·ªôi Vi·ªát Nam

üéØ Bao g·ªìm 4 lo·∫°i d·ªØ li·ªáu ch√≠nh:
üë• Danh s√°ch nh√¢n vi√™n
üí∞ D·ªØ li·ªáu ƒë√≥ng g√≥p BHXH
üìã H·ªì s∆° y√™u c·∫ßu b·∫£o hi·ªÉm
üè• Danh s√°ch b·ªánh vi·ªán

Author: MiniMax Agent
Date: 2025-09-19
"""

from pydantic import BaseModel, Field, validator
from typing import List, Optional, Dict, Any, Union
from datetime import datetime, date
from enum import Enum
from decimal import Decimal


class EmployeeStatus(str, Enum):
    """Tr·∫°ng th√°i nh√¢n vi√™n"""
    ACTIVE = "active"                    # ƒêang l√†m vi·ªác
    INACTIVE = "inactive"                # Ng·ª´ng l√†m vi·ªác
    SUSPENDED = "suspended"              # T·∫°m ng·ª´ng
    TERMINATED = "terminated"            # Ch·∫•m d·ª©t h·ª£p ƒë·ªìng
    MATERNITY_LEAVE = "maternity_leave"  # Ngh·ªâ thai s·∫£n
    SICK_LEAVE = "sick_leave"           # Ngh·ªâ ·ªëm d√†i h·∫°n


class InsuranceType(str, Enum):
    """Lo·∫°i b·∫£o hi·ªÉm"""
    BHXH = "bhxh"                       # B·∫£o hi·ªÉm x√£ h·ªôi
    BHYT = "bhyt"                       # B·∫£o hi·ªÉm y t·∫ø
    BHTN = "bhtn"                       # B·∫£o hi·ªÉm th·∫•t nghi·ªáp
    BHTNNLƒê = "bhtnnld"                 # B·∫£o hi·ªÉm tai n·∫°n ngh·ªÅ nghi·ªáp


class ContributionStatus(str, Enum):
    """Tr·∫°ng th√°i ƒë√≥ng g√≥p"""
    PAID = "paid"                       # ƒê√£ ƒë√≥ng
    PENDING = "pending"                 # ƒêang ch·ªù
    OVERDUE = "overdue"                 # Qu√° h·∫°n
    EXEMPTED = "exempted"               # ƒê∆∞·ª£c mi·ªÖn
    DISPUTED = "disputed"               # ƒêang tranh ch·∫•p


class ClaimStatus(str, Enum):
    """Tr·∫°ng th√°i h·ªì s∆° y√™u c·∫ßu"""
    SUBMITTED = "submitted"             # ƒê√£ n·ªôp
    UNDER_REVIEW = "under_review"       # ƒêang xem x√©t
    APPROVED = "approved"               # ƒê√£ duy·ªát
    REJECTED = "rejected"               # B·ªã t·ª´ ch·ªëi
    REQUIRES_ADDITIONAL_INFO = "requires_additional_info"  # C·∫ßn b·ªï sung


class HospitalType(str, Enum):
    """Lo·∫°i b·ªánh vi·ªán"""
    PUBLIC = "public"                   # C√¥ng l·∫≠p
    PRIVATE = "private"                 # T∆∞ nh√¢n
    SPECIALIST = "specialist"           # Chuy√™n khoa
    GENERAL = "general"                 # ƒêa khoa
    TRADITIONAL = "traditional"         # Y h·ªçc c·ªï truy·ªÅn


class EmployeeRecord(BaseModel):
    """Th√¥ng tin chi ti·∫øt nh√¢n vi√™n trong h·ªá th·ªëng VSS"""
    
    # Th√¥ng tin c∆° b·∫£n
    employee_id: str = Field(..., description="M√£ nh√¢n vi√™n")
    full_name: str = Field(..., description="H·ªç v√† t√™n")
    citizen_id: str = Field(..., description="S·ªë CMND/CCCD")
    date_of_birth: date = Field(..., description="Ng√†y sinh")
    gender: str = Field(..., description="Gi·ªõi t√≠nh")
    
    # Th√¥ng tin li√™n h·ªá
    address: str = Field(..., description="ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫")
    phone_number: Optional[str] = Field(None, description="S·ªë ƒëi·ªán tho·∫°i")
    email: Optional[str] = Field(None, description="Email")
    
    # Th√¥ng tin c√¥ng vi·ªác
    position: str = Field(..., description="Ch·ª©c v·ª•")
    department: str = Field(..., description="Ph√≤ng ban")
    hire_date: date = Field(..., description="Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác")
    termination_date: Optional[date] = Field(None, description="Ng√†y ngh·ªâ vi·ªác")
    status: EmployeeStatus = Field(..., description="Tr·∫°ng th√°i hi·ªán t·∫°i")
    
    # Th√¥ng tin l∆∞∆°ng v√† b·∫£o hi·ªÉm
    base_salary: Decimal = Field(..., description="L∆∞∆°ng c∆° b·∫£n")
    insurance_salary: Decimal = Field(..., description="L∆∞∆°ng ƒë√≥ng b·∫£o hi·ªÉm")
    insurance_start_date: date = Field(..., description="Ng√†y b·∫Øt ƒë·∫ßu ƒë√≥ng BHXH")
    
    # Metadata
    last_updated: datetime = Field(default_factory=datetime.now)
    created_at: datetime = Field(default_factory=datetime.now)
    
    @validator('citizen_id')
    def validate_citizen_id(cls, v):
        """Validate Vietnamese Citizen ID format"""
        if len(v) not in [9, 12]:
            raise ValueError('Citizen ID must be 9 or 12 digits')
        if not v.isdigit():
            raise ValueError('Citizen ID must contain only digits')
        return v


class InsuranceContribution(BaseModel):
    """Th√¥ng tin ƒë√≥ng g√≥p b·∫£o hi·ªÉm x√£ h·ªôi"""
    
    # Th√¥ng tin c∆° b·∫£n
    contribution_id: str = Field(..., description="M√£ ƒë√≥ng g√≥p")
    employee_id: str = Field(..., description="M√£ nh√¢n vi√™n")
    contribution_period: str = Field(..., description="K·ª≥ ƒë√≥ng (MM/YYYY)")
    
    # Chi ti·∫øt ƒë√≥ng g√≥p
    bhxh_employee_amount: Decimal = Field(..., description="BHXH - Ng∆∞·ªùi lao ƒë·ªông")
    bhxh_employer_amount: Decimal = Field(..., description="BHXH - Ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông")
    bhyt_employee_amount: Decimal = Field(..., description="BHYT - Ng∆∞·ªùi lao ƒë·ªông")
    bhyt_employer_amount: Decimal = Field(..., description="BHYT - Ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông")
    bhtn_employee_amount: Decimal = Field(..., description="BHTN - Ng∆∞·ªùi lao ƒë·ªông")
    bhtn_employer_amount: Decimal = Field(..., description="BHTN - Ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông")
    
    # T·ªïng c·ªông
    total_employee_contribution: Decimal = Field(..., description="T·ªïng ƒë√≥ng g√≥p ng∆∞·ªùi lao ƒë·ªông")
    total_employer_contribution: Decimal = Field(..., description="T·ªïng ƒë√≥ng g√≥p ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông")
    total_contribution: Decimal = Field(..., description="T·ªïng ƒë√≥ng g√≥p")
    
    # Tr·∫°ng th√°i
    status: ContributionStatus = Field(..., description="Tr·∫°ng th√°i ƒë√≥ng g√≥p")
    payment_date: Optional[date] = Field(None, description="Ng√†y thanh to√°n")
    due_date: date = Field(..., description="H·∫°n cu·ªëi thanh to√°n")
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)


class InsuranceClaim(BaseModel):
    """H·ªì s∆° y√™u c·∫ßu b·∫£o hi·ªÉm"""
    
    # Th√¥ng tin c∆° b·∫£n
    claim_id: str = Field(..., description="M√£ h·ªì s∆°")
    employee_id: str = Field(..., description="M√£ nh√¢n vi√™n")
    claim_type: InsuranceType = Field(..., description="Lo·∫°i b·∫£o hi·ªÉm")
    
    # Chi ti·∫øt y√™u c·∫ßu
    claim_title: str = Field(..., description="Ti√™u ƒë·ªÅ y√™u c·∫ßu")
    claim_description: str = Field(..., description="M√¥ t·∫£ chi ti·∫øt")
    claim_amount: Decimal = Field(..., description="S·ªë ti·ªÅn y√™u c·∫ßu")
    
    # Ng√†y th√°ng
    incident_date: date = Field(..., description="Ng√†y x·∫£y ra s·ª± vi·ªác")
    submission_date: date = Field(..., description="Ng√†y n·ªôp h·ªì s∆°")
    expected_processing_date: Optional[date] = Field(None, description="Ng√†y d·ª± ki·∫øn x·ª≠ l√Ω")
    completion_date: Optional[date] = Field(None, description="Ng√†y ho√†n th√†nh")
    
    # Tr·∫°ng th√°i v√† k·∫øt qu·∫£
    status: ClaimStatus = Field(..., description="Tr·∫°ng th√°i h·ªì s∆°")
    approved_amount: Optional[Decimal] = Field(None, description="S·ªë ti·ªÅn ƒë∆∞·ª£c duy·ªát")
    rejection_reason: Optional[str] = Field(None, description="L√Ω do t·ª´ ch·ªëi")
    
    # T√†i li·ªáu ƒë√≠nh k√®m
    required_documents: List[str] = Field(default_factory=list, description="T√†i li·ªáu y√™u c·∫ßu")
    submitted_documents: List[str] = Field(default_factory=list, description="T√†i li·ªáu ƒë√£ n·ªôp")
    missing_documents: List[str] = Field(default_factory=list, description="T√†i li·ªáu c√≤n thi·∫øu")
    
    # Th√¥ng tin x·ª≠ l√Ω
    assigned_officer: Optional[str] = Field(None, description="C√°n b·ªô ph·ª• tr√°ch")
    processing_notes: List[str] = Field(default_factory=list, description="Ghi ch√∫ x·ª≠ l√Ω")
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.now)
    last_updated: datetime = Field(default_factory=datetime.now)


class Hospital(BaseModel):
    """Th√¥ng tin b·ªánh vi·ªán trong h·ªá th·ªëng BHYT"""
    
    # Th√¥ng tin c∆° b·∫£n
    hospital_id: str = Field(..., description="M√£ b·ªánh vi·ªán")
    hospital_name: str = Field(..., description="T√™n b·ªánh vi·ªán")
    hospital_code: str = Field(..., description="M√£ ƒëƒÉng k√Ω kh√°m ch·ªØa b·ªánh BHYT")
    
    # Ph√¢n lo·∫°i
    hospital_type: HospitalType = Field(..., description="Lo·∫°i h√¨nh b·ªánh vi·ªán")
    hospital_level: str = Field(..., description="H·∫°ng b·ªánh vi·ªán (Tuy·∫øn T1, T2, T3...)")
    specialties: List[str] = Field(default_factory=list, description="C√°c chuy√™n khoa")
    
    # Th√¥ng tin ƒë·ªãa ch·ªâ
    address: str = Field(..., description="ƒê·ªãa ch·ªâ")
    province: str = Field(..., description="T·ªânh/Th√†nh ph·ªë")
    district: str = Field(..., description="Qu·∫≠n/Huy·ªán")
    ward: str = Field(..., description="Ph∆∞·ªùng/X√£")
    
    # Th√¥ng tin li√™n h·ªá
    phone_number: Optional[str] = Field(None, description="S·ªë ƒëi·ªán tho·∫°i")
    email: Optional[str] = Field(None, description="Email")
    website: Optional[str] = Field(None, description="Website")
    
    # Th√¥ng tin BHYT
    accepts_bhyt: bool = Field(True, description="C√≥ nh·∫≠n BHYT kh√¥ng")
    bhyt_contract_start: Optional[date] = Field(None, description="Ng√†y b·∫Øt ƒë·∫ßu h·ª£p ƒë·ªìng BHYT")
    bhyt_contract_end: Optional[date] = Field(None, description="Ng√†y k·∫øt th√∫c h·ª£p ƒë·ªìng BHYT")
    
    # Ch·∫•t l∆∞·ª£ng d·ªãch v·ª•
    bed_count: Optional[int] = Field(None, description="S·ªë gi∆∞·ªùng b·ªánh")
    doctor_count: Optional[int] = Field(None, description="S·ªë b√°c sƒ©")
    quality_rating: Optional[float] = Field(None, description="ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng", ge=0, le=5)
    
    # Metadata
    is_active: bool = Field(True, description="C√≤n ho·∫°t ƒë·ªông kh√¥ng")
    last_updated: datetime = Field(default_factory=datetime.now)
    created_at: datetime = Field(default_factory=datetime.now)


class VSSDataSummary(BaseModel):
    """T·ªïng h·ª£p d·ªØ li·ªáu VSS cho m·ªôt doanh nghi·ªáp"""
    
    # Th√¥ng tin doanh nghi·ªáp
    company_tax_code: str = Field(..., description="M√£ s·ªë thu·∫ø")
    company_name: str = Field(..., description="T√™n doanh nghi·ªáp")
    
    # T·ªïng quan nh√¢n vi√™n
    total_employees: int = Field(0, description="T·ªïng s·ªë nh√¢n vi√™n")
    active_employees: int = Field(0, description="S·ªë nh√¢n vi√™n ƒëang l√†m vi·ªác")
    inactive_employees: int = Field(0, description="S·ªë nh√¢n vi√™n ng·ª´ng l√†m vi·ªác")
    
    # Danh s√°ch nh√¢n vi√™n chi ti·∫øt
    employees: List[EmployeeRecord] = Field(default_factory=list)
    
    # T·ªïng quan ƒë√≥ng g√≥p BHXH
    total_contributions: int = Field(0, description="T·ªïng s·ªë k·ª≥ ƒë√≥ng g√≥p")
    total_contribution_amount: Decimal = Field(Decimal('0'), description="T·ªïng s·ªë ti·ªÅn ƒë√≥ng g√≥p")
    
    # Danh s√°ch ƒë√≥ng g√≥p chi ti·∫øt
    contributions: List[InsuranceContribution] = Field(default_factory=list)
    
    # T·ªïng quan h·ªì s∆° b·∫£o hi·ªÉm
    total_claims: int = Field(0, description="T·ªïng s·ªë h·ªì s∆°")
    approved_claims: int = Field(0, description="S·ªë h·ªì s∆° ƒë∆∞·ª£c duy·ªát")
    pending_claims: int = Field(0, description="S·ªë h·ªì s∆° ƒëang ch·ªù")
    rejected_claims: int = Field(0, description="S·ªë h·ªì s∆° b·ªã t·ª´ ch·ªëi")
    
    # Danh s√°ch h·ªì s∆° chi ti·∫øt
    claims: List[InsuranceClaim] = Field(default_factory=list)
    
    # Danh s√°ch b·ªánh vi·ªán li√™n quan
    related_hospitals: List[Hospital] = Field(default_factory=list)
    
    # Th·ªùi gian truy xu·∫•t
    extraction_timestamp: datetime = Field(default_factory=datetime.now)
    data_source: str = Field("VSS_SYSTEM", description="Ngu·ªìn d·ªØ li·ªáu")
    
    # Metadata ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu
    data_completeness_score: float = Field(0.0, description="ƒêi·ªÉm ho√†n thi·ªán d·ªØ li·ªáu", ge=0, le=100)
    data_accuracy_score: float = Field(0.0, description="ƒêi·ªÉm ch√≠nh x√°c d·ªØ li·ªáu", ge=0, le=100)
    extraction_duration_seconds: float = Field(0.0, description="Th·ªùi gian tr√≠ch xu·∫•t (gi√¢y)")


class VSSExtractionResult(BaseModel):
    """K·∫øt qu·∫£ tr√≠ch xu·∫•t d·ªØ li·ªáu VSS ho√†n ch·ªânh"""
    
    # Th√¥ng tin truy xu·∫•t
    extraction_id: str = Field(default_factory=lambda: f"VSS_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    company_tax_code: str = Field(..., description="M√£ s·ªë thu·∫ø")
    extraction_status: str = Field("success", description="Tr·∫°ng th√°i tr√≠ch xu·∫•t")
    
    # D·ªØ li·ªáu VSS ƒë·∫ßy ƒë·ªß
    vss_data: VSSDataSummary = Field(..., description="D·ªØ li·ªáu VSS t·ªïng h·ª£p")
    
    # Th·ªëng k√™ t·ªïng quan
    extraction_summary: Dict[str, Any] = Field(default_factory=dict)
    
    # C·∫£nh b√°o v√† l·ªói
    warnings: List[str] = Field(default_factory=list)
    errors: List[str] = Field(default_factory=list)
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.now)
    processing_time_ms: float = Field(0.0, description="Th·ªùi gian x·ª≠ l√Ω (milliseconds)")
    
    def add_summary_stats(self):
        """T·ª± ƒë·ªông t√≠nh to√°n th·ªëng k√™ t·ªïng quan"""
        self.extraction_summary = {
            "employees": {
                "total": len(self.vss_data.employees),
                "active": len([e for e in self.vss_data.employees if e.status == EmployeeStatus.ACTIVE]),
                "inactive": len([e for e in self.vss_data.employees if e.status != EmployeeStatus.ACTIVE])
            },
            "contributions": {
                "total_periods": len(self.vss_data.contributions),
                "total_amount": float(sum(c.total_contribution for c in self.vss_data.contributions)),
                "paid": len([c for c in self.vss_data.contributions if c.status == ContributionStatus.PAID]),
                "pending": len([c for c in self.vss_data.contributions if c.status == ContributionStatus.PENDING])
            },
            "claims": {
                "total": len(self.vss_data.claims),
                "approved": len([c for c in self.vss_data.claims if c.status == ClaimStatus.APPROVED]),
                "pending": len([c for c in self.vss_data.claims if c.status == ClaimStatus.UNDER_REVIEW]),
                "rejected": len([c for c in self.vss_data.claims if c.status == ClaimStatus.REJECTED])
            },
            "hospitals": {
                "total": len(self.vss_data.related_hospitals),
                "public": len([h for h in self.vss_data.related_hospitals if h.hospital_type == HospitalType.PUBLIC]),
                "private": len([h for h in self.vss_data.related_hospitals if h.hospital_type == HospitalType.PRIVATE])
            }
        }
